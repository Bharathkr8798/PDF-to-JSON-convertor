
Imports:

pdfplumber: A library used for extracting text and tables from PDF files.
json: A standard Python library for working with JSON data, such as parsing, manipulating, and saving JSON.
pandas: A powerful data manipulation library that is useful for working with structured data like tables.
PyPDF2: A library for reading PDF files and extracting metadata and other information, such as the title, author, and creation date.



Function: extract_metadata

Purpose: Extracts metadata information (title, author, and creation date) from a PDF file.
PdfReader(pdf_path): Reads the PDF file located at pdf_path.
reader.metadata: Extracts the metadata of the PDF.
The metadata dictionary is returned with:
"title": The title of the document (if available).
"author": The author of the document (if available).
"date": The creation date, or 'Unknown Date' if not available.



Function: clean_text

Purpose: Cleans up extracted text by ensuring consistent spacing.
text.split(): Splits the text into a list of words, removing excess whitespace.
" ".join(...): Joins the list back into a single string with a single space between words.




Function: abstract_table_representation

Purpose: Converts raw table data into an abstract representation using pandas.
raw_table[1:]: Skips the first row, which is considered the header.
pd.DataFrame(raw_table[1:], columns=raw_table[0]): Creates a pandas DataFrame, where the first row (raw_table[0]) is treated as column headers.
df.to_dict(orient="records"): Converts the DataFrame rows into a list of dictionaries, where each dictionary represents a row.
If no valid table is found, it returns an empty dictionary.




Function: extract_text_and_tables

Purpose: Extracts both text and tables from a PDF file.
pdfplumber.open(pdf_path): Opens the PDF file using pdfplumber.
Iterates through each page (for i, page in enumerate(pdf.pages)).
page.extract_text(): Extracts the raw text from the page.
clean_text(text): Cleans up the extracted text.
page.extract_tables(): Extracts tables from the page.
For each table, abstract_table_representation(table) is called to convert it into an abstract format.
The data for each page is stored in a dictionary containing the page number, cleaned text, and the list of tables (or None if no tables are found).




Function: generate_json

Purpose: Generates a structured JSON containing metadata and extracted content.
Calls extract_metadata(pdf_path) to get metadata.
Calls extract_text_and_tables(pdf_path) to get the content of the PDF (text and tables).
Combines the extracted metadata and content into a structured JSON dictionary.



Function: save_to_json

Purpose: Saves the generated JSON data to a file.
json.dump(data, f, indent=4, ensure_ascii=False): Writes the JSON data to the file with an indentation of 4 spaces for readability and ensures that non-ASCII characters are properly encoded.



Main Script Execution:

Purpose: This block executes the script if it's run as the main program.
Specifies the input PDF file (pdf_file) and the output JSON file (output_json).
Calls generate_json(pdf_file) to extract data from the PDF.
Calls save_to_json(structured_data, output_json) to save the extracted data to a JSON file.
If successful, it prints a success message; if an error occurs, it prints the error message.
